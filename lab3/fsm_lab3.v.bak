module FSM(clk, rst, R_en, R_src, R_dest, R_or_I, ALU_op, Flag_en);
 
 input clk, rst;
 
 output reg we_a, we_b;
 output reg [15:0] data_a, data_b;
 output reg [9:0] addr_a, addr_b;

 //output reg [15:0] R_en;
 
 reg [3:0] state_counter = 4'b0000;
 
 
 always @(posedge clk)
 begin
	if(rst == 1) state_counter = 4'b0000;
	
	// Else, check if the state counter is at the end and if not increment it to the next state.
	else
	begin
		if(state_counter < 4'b1111) state_counter = state_counter + 1'b1;
		
		else state_counter = state_counter;
	end
 end
 
 always @(state_counter)
 begin
	case(state_counter)
		0: //Read memory 0, store in r0
			begin
				we_a   =  1'b0;
				we_b   =  1'b0;
				
				data_a = 16'b0;
				data_b = 16'b0;
				
				addr_a = 10'h0;
				addr_b = 10'h0;
			
				r0 = q_a;
			end
			
			1: // Read memory 1, store in r1
			begin
				we_a   =  1'b0;
				we_b   =  1'b0;
				
				data_a = 16'b1;
				data_b = 16'b1;
				
				addr_a = 10'h1;
				addr_b = 10'h1;
				
				r1 = q_b;
			end
			
			2: // Read value from memory, store in r2.
			begin
				we_a   =  1'b0;
				we_b   =  1'b0;
				
				data_a = 16'h2;
				data_b = 16'h2;
				
				addr_a = 10'h2;
				addr_b = 10'h2;
				r2 = q_a;
				
			end
			
			3: // Modify value from memory 1 by 2 through a and store in memory 3.
			begin
				we_a   =  1'b1;
				we_b   =  1'b0;
				
				r1 = r1 + 2;
				
				data_a = r1;
				data_b = 16'h3;
				
				addr_a = 10'h3;
				addr_b = 10'h3;	
				
				h3 = q_a[15:12];  // Prevent output pins from being stuck to GND or VCC
				h2 = q_a[11:8];   // Also prevents quartus from not making the full ram module.
				h1 = q_a[7:4];
				h0 = q_a[3:0]; 
			end
			
			4: // Store the value of r1 into memory value 5 through b.
			begin
				we_a   =  1'b0;
				we_b   =  1'b1;
				
				data_a = 16'b1;
				data_b = r1;
				
				addr_a = 10'h2;
				addr_b = 10'h5;	
				
				h3 = q_a[15:12];  // Prevent output pins from being stuck to GND or VCC
				h2 = q_a[11:8];   // Also prevents quartus from not making the full ram module.
				h1 = q_a[7:4];
				h0 = q_a[3:0]; 
			end
			
			5: // Read value from memory 510 through b.
			begin
				we_a   =  1'b0;
				we_b   =  1'b0;
				
				data_a = 16'b1;
				data_b = 16'h2;
				
				addr_a = 10'h2;
				addr_b = 10'h1FE;	
				
				h3 = q_b[15:12];  // Prevent output pins from being stuck to GND or VCC
				h2 = q_b[11:8];   // Also prevents quartus from not making the full ram module.
				h1 = q_b[7:4];
				h0 = q_b[3:0]; 
			end
			
			6: // Read value from memory 512 through b.
			begin
				we_a   =  1'b0;
				we_b   =  1'b0;
				
				data_a = 16'b1;
				data_b = 16'h2;
				
				addr_a = 10'h2;
				addr_b = 10'h200;	
				
				h3 = q_b[15:12];  // Prevent output pins from being stuck to GND or VCC
				h2 = q_b[11:8];   // Also prevents quartus from not making the full ram module.
				h1 = q_b[7:4];
				h0 = q_b[3:0]; 
			end
			
			7: // Read value from memory 5 through a.
			begin
				we_a   =  1'b0;
				we_b   =  1'b0;
				
				data_a = 16'b1;
				data_b = 16'h2;
				
				addr_a = 10'h5;
				addr_b = 10'h1FE;	
				
				h3 = q_a[15:12];  // Prevent output pins from being stuck to GND or VCC
				h2 = q_a[11:8];   // Also prevents quartus from not making the full ram module.
				h1 = q_a[7:4];
				h0 = q_a[3:0]; 
			end
			
			8: // Read value from memory 510 through b.
			begin
				we_a   =  1'b0;
				we_b   =  1'b0;
				
				data_a = 16'b1;
				data_b = 16'h2;
				
				addr_a = 10'h2;
				addr_b = 10'h1FE;	
				
				h3 = q_b[15:12];  // Prevent output pins from being stuck to GND or VCC
				h2 = q_b[11:8];   // Also prevents quartus from not making the full ram module.
				h1 = q_b[7:4];
				h0 = q_b[3:0]; 
			end
			
			default: // Shouldn't get here.
			begin
				h3 <= 4'hd;
				h2 <= 4'he;
				h1 <= 4'ha;
				h0 <= 4'hd;
			end
	
	endcase
 end
 
 endmodule